Main.java - Clase principal
package com.studentorganizer;

import com.studentorganizer.gui.LoginFrame;
import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        // Configurar Look and Feel del sistema
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Ejecutar la aplicación en el Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            new LoginFrame().setVisible(true);
        });
    }
}

// LoginFrame.java - Ventana de login y registro
package com.studentorganizer.gui;

import com.studentorganizer.model.Estudiante;
import com.studentorganizer.service.EstudianteService;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginFrame extends JFrame {
    private JTextField emailField;
    private JPasswordField passwordField;
    private JTextField nombreField;
    private JTextField carreraField;
    private JButton loginButton;
    private JButton registerButton;
    private JButton switchModeButton;
    private JPanel cardPanel;
    private CardLayout cardLayout;
    private EstudianteService estudianteService;
    
    public LoginFrame() {
        estudianteService = new EstudianteService();
        initializeComponents();
        setupUI();
        setupEventListeners();
    }
    
    private void initializeComponents() {
        setTitle("StudyOrganizer - Organiza tu vida académica");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 500);
        setLocationRelativeTo(null);
        setResizable(false);
        
        cardLayout = new CardLayout();
        cardPanel = new JPanel(cardLayout);
    }
    
    private void setupUI() {
        // Panel de Login
        JPanel loginPanel = createLoginPanel();
        
        // Panel de Registro
        JPanel registerPanel = createRegisterPanel();
        
        cardPanel.add(loginPanel, "LOGIN");
        cardPanel.add(registerPanel, "REGISTER");
        
        add(cardPanel);
    }
    
    private JPanel createLoginPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createEmptyBorder(50, 50, 50, 50));
        panel.setBackground(new Color(102, 126, 234));
        
        // Título
        JLabel titleLabel = new JLabel("Iniciar Sesión");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Campos
        emailField = new JTextField(20);
        passwordField = new JPasswordField(20);
        
        // Botones
        loginButton = new JButton("Iniciar Sesión");
        loginButton.setBackground(new Color(6, 214, 160));
        loginButton.setForeground(Color.WHITE);
        loginButton.setFocusPainted(false);
        
        switchModeButton = new JButton("¿No tienes cuenta? Regístrate");
        switchModeButton.setContentAreaFilled(false);
        switchModeButton.setBorderPainted(false);
        switchModeButton.setForeground(Color.WHITE);
        
        // Layout
        panel.add(titleLabel);
        panel.add(Box.createRigidArea(new Dimension(0, 30)));
        panel.add(createLabeledField("Email:", emailField));
        panel.add(Box.createRigidArea(new Dimension(0, 15)));
        panel.add(createLabeledField("Contraseña:", passwordField));
        panel.add(Box.createRigidArea(new Dimension(0, 30)));
        panel.add(loginButton);
        panel.add(Box.createRigidArea(new Dimension(0, 15)));
        panel.add(switchModeButton);
        
        return panel;
    }
    
    private JPanel createRegisterPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createEmptyBorder(30, 50, 30, 50));
        panel.setBackground(new Color(118, 75, 162));
        
        // Título
        JLabel titleLabel = new JLabel("Registro");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Campos
        nombreField = new JTextField(20);
        carreraField = new JTextField(20);
        JTextField emailRegField = new JTextField(20);
        JPasswordField passwordRegField = new JPasswordField(20);
        
        // Botones
        registerButton = new JButton("Registrarse");
        registerButton.setBackground(new Color(6, 214, 160));
        registerButton.setForeground(Color.WHITE);
        registerButton.setFocusPainted(false);
        
        JButton backButton = new JButton("¿Ya tienes cuenta? Inicia sesión");
        backButton.setContentAreaFilled(false);
        backButton.setBorderPainted(false);
        backButton.setForeground(Color.WHITE);
        
        // Event listeners para registro
        registerButton.addActionListener(e -> {
            String nombre = nombreField.getText().trim();
            String carrera = carreraField.getText().trim();
            String email = emailRegField.getText().trim();
            String password = new String(passwordRegField.getPassword());
            
            if (nombre.isEmpty() || carrera.isEmpty() || email.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor completa todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (estudianteService.registrarEstudiante(email, password, nombre, carrera)) {
                JOptionPane.showMessageDialog(this, "Registro exitoso! Ahora puedes iniciar sesión.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cardLayout.show(cardPanel, "LOGIN");
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "El email ya está registrado", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        
        backButton.addActionListener(e -> cardLayout.show(cardPanel, "LOGIN"));
        
        // Layout
        panel.add(titleLabel);
        panel.add(Box.createRigidArea(new Dimension(0, 20)));
        panel.add(createLabeledField("Nombre:", nombreField));
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(createLabeledField("Carrera:", carreraField));
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(createLabeledField("Email:", emailRegField));
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(createLabeledField("Contraseña:", passwordRegField));
        panel.add(Box.createRigidArea(new Dimension(0, 20)));
        panel.add(registerButton);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));
        panel.add(backButton);
        
        return panel;
    }
    
    private JPanel createLabeledField(String labelText, JTextField field) {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.setOpaque(false);
        
        JLabel label = new JLabel(labelText);
        label.setForeground(Color.WHITE);
        label.setFont(new Font("Arial", Font.BOLD, 12));
        
        field.setPreferredSize(new Dimension(200, 30));
        field.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(Color.WHITE, 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        
        panel.add(label, BorderLayout.NORTH);
        panel.add(field, BorderLayout.CENTER);
        
        return panel;
    }
    
    private void setupEventListeners() {
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String email = emailField.getText().trim();
                String password = new String(passwordField.getPassword());
                
                if (email.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(LoginFrame.this, 
                        "Por favor completa todos los campos", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Estudiante estudiante = estudianteService.autenticarEstudiante(email, password);
                if (estudiante != null) {
                    // Abrir ventana principal
                    new MainFrame(estudiante).setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(LoginFrame.this, 
                        "Credenciales incorrectas", 
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        
        switchModeButton.addActionListener(e -> cardLayout.show(cardPanel, "REGISTER"));
    }
    
    private void clearFields() {
        emailField.setText("");
        passwordField.setText("");
        if (nombreField != null) nombreField.setText("");
        if (carreraField != null) carreraField.setText("");
    }
}
-----------------------------------------------------------------------------------------
/ Estudiante.java
package com.studentorganizer.model;

import java.util.ArrayList;
import java.util.List;

public class Estudiante {
    private String nombre;
    private String carrera;
    private String email;
    private String password;
    private List<Tarea> listaDeTareas;
    private Agenda agenda;
    
    public Estudiante(String nombre, String carrera, String email, String password) {
        this.nombre = nombre;
        this.carrera = carrera;
        this.email = email;
        this.password = password;
        this.listaDeTareas = new ArrayList<>();
        this.agenda = new Agenda();
    }
    
    // Métodos de negocio
    public void agregarTarea(Tarea nuevaTarea) {
        listaDeTareas.add(nuevaTarea);
        // Agregar a la agenda también
        agenda.agregarEvento(nuevaTarea, nuevaTarea.getFechaEntrega());
    }
    
    public void eliminarTarea(Tarea tareaAEliminar) {
        listaDeTareas.remove(tareaAEliminar);
    }
    
    public List<Tarea> obtenerTareasPendientes() {
        List<Tarea> tareasPendientes = new ArrayList<>();
        for (Tarea tarea : listaDeTareas) {
            if (tarea.getEstado() == Estado.PENDIENTE) {
                tareasPendientes.add(tarea);
            }
        }
        return tareasPendientes;
    }
    
    public List<Tarea> obtenerTareasCompletadas() {
        List<Tarea> tareasCompletadas = new ArrayList<>();
        for (Tarea tarea : listaDeTareas) {
            if (tarea.getEstado() == Estado.COMPLETADA) {
                tareasCompletadas.add(tarea);
            }
        }
        return tareasCompletadas;
    }
    
    // Getters y Setters
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    
    public String getCarrera() { return carrera; }
    public void setCarrera(String carrera) { this.carrera = carrera; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public List<Tarea> getListaDeTareas() { return listaDeTareas; }
    public void setListaDeTareas(List<Tarea> listaDeTareas) { this.listaDeTareas = listaDeTareas; }
    
    public Agenda getAgenda() { return agenda; }
    public void setAgenda(Agenda agenda) { this.agenda = agenda; }
}

// Tarea.java
package com.studentorganizer.model;

import java.time.LocalDate;

public class Tarea {
    private String nombre;
    private String descripcion;
    private LocalDate fechaEntrega;
    private Prioridad prioridad;
    private Estado estado;
    private Curso curso;
    
    public Tarea(String nombre, LocalDate fechaEntrega, Curso curso) {
        this.nombre = nombre;
        this.fechaEntrega = fechaEntrega;
        this.curso = curso;
        this.estado = Estado.PENDIENTE;
        this.prioridad = Prioridad.MEDIA;
        this.descripcion = "";
    }
    
    public Tarea(String nombre, String descripcion, LocalDate fechaEntrega, Prioridad prioridad, Curso curso) {
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.fechaEntrega = fechaEntrega;
        this.prioridad = prioridad;
        this.curso = curso;
        this.estado = Estado.PENDIENTE;
    }
    
    // Métodos de negocio
    public void marcarComoCompletada() {
        this.estado = Estado.COMPLETADA;
    }
    
    public void editarTarea(String nombre, String descripcion, LocalDate fechaEntrega, Prioridad prioridad) {
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.fechaEntrega = fechaEntrega;
        this.prioridad = prioridad;
    }
    
    // Getters y Setters
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    
    public String getDescripcion() { return descripcion; }
    public void setDescripcion(String descripcion) { this.descripcion = descripcion; }
    
    public LocalDate getFechaEntrega() { return fechaEntrega; }
    public void setFechaEntrega(LocalDate fechaEntrega) { this.fechaEntrega = fechaEntrega; }
    
    public Prioridad getPrioridad() { return prioridad; }
    public void setPrioridad(Prioridad prioridad) { this.prioridad = prioridad; }
    
    public Estado getEstado() { return estado; }
    public void setEstado(Estado estado) { this.estado = estado; }
    
    public Curso getCurso() { return curso; }
    public void setCurso(Curso curso) { this.curso = curso; }
    
    @Override
    public String toString() {
        return nombre + " - " + fechaEntrega + " (" + prioridad + ")";
    }
}

// Curso.java
package com.studentorganizer.model;

import java.awt.Color;

public class Curso {
    private String nombre;
    private String descripcion;
    private Color color;
    
    public Curso(String nombre, String descripcion) {
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.color = Color.BLUE; // Color por defecto
    }
    
    public Curso(String nombre, String descripcion, Color color) {
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.color = color;
    }
    
    // Getters y Setters
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    
    public String getDescripcion() { return descripcion; }
    public void setDescripcion(String descripcion) { this.descripcion = descripcion; }
    
    public Color getColor() { return color; }
    public void setColor(Color color) { this.color = color; }
    
    @Override
    public String toString() {
        return nombre;
    }
}

// SesionEstudio.java
package com.studentorganizer.model;

import java.time.LocalDateTime;

public class SesionEstudio {
    private Tarea tareaAsociada;
    private LocalDateTime horaInicio;
    private int duracionMinutos;
    private TecnicaEstudio tecnica;
    private boolean activa;
    
    public SesionEstudio(Tarea tarea, int duracion, TecnicaEstudio tecnica) {
        this.tareaAsociada = tarea;
        this.duracionMinutos = duracion;
        this.tecnica = tecnica;
        this.activa = false;
    }
    
    // Métodos de negocio
    public void iniciar() {
        this.horaInicio = LocalDateTime.now();
        this.activa = true;
    }
    
    public void finalizar() {
        this.activa = false;
    }
    
    public long getTiempoTranscurrido() {
        if (horaInicio == null) return 0;
        return java.time.Duration.between(horaInicio, LocalDateTime.now()).toMinutes();
    }
    
    // Getters y Setters
    public Tarea getTareaAsociada() { return tareaAsociada; }
    public void setTareaAsociada(Tarea tareaAsociada) { this.tareaAsociada = tareaAsociada; }
    
    public LocalDateTime getHoraInicio() { return horaInicio; }
    public void setHoraInicio(LocalDateTime horaInicio) { this.horaInicio = horaInicio; }
    
    public int getDuracionMinutos() { return duracionMinutos; }
    public void setDuracionMinutos(int duracionMinutos) { this.duracionMinutos = duracionMinutos; }
    
    public TecnicaEstudio getTecnica() { return tecnica; }
    public void setTecnica(TecnicaEstudio tecnica) { this.tecnica = tecnica; }
    
    public boolean isActiva() { return activa; }
    public void setActiva(boolean activa) { this.activa = activa; }
}

// Agenda.java
package com.studentorganizer.model;

import java.time.LocalDate;
import java.util.*;

public class Agenda {
    private Map<LocalDate, List<Tarea>> eventos;
    
    public Agenda() {
        this.eventos = new HashMap<>();
    }
    
    public void agregarEvento(Tarea evento, LocalDate fecha) {
        if (!eventos.containsKey(fecha)) {
            eventos.put(fecha, new ArrayList<>());
        }
        eventos.get(fecha).add(evento);
    }
    
    public List<Tarea> verEventosDelDia(LocalDate fecha) {
        return eventos.getOrDefault(fecha, new ArrayList<>());
    }
    
    public Map<LocalDate, List<Tarea>> verEventosDelMes(LocalDate fecha) {
        Map<LocalDate, List<Tarea>> eventosMes = new HashMap<>();
        LocalDate inicioMes = fecha.withDayOfMonth(1);
        LocalDate finMes = fecha.withDayOfMonth(fecha.lengthOfMonth());
        
        for (Map.Entry<LocalDate, List<Tarea>> entry : eventos.entrySet()) {
            LocalDate fechaEvento = entry.getKey();
            if (!fechaEvento.isBefore(inicioMes) && !fechaEvento.isAfter(finMes)) {
                eventosMes.put(fechaEvento, entry.getValue());
            }
        }
        
        return eventosMes;
    }
    
    public Map<LocalDate, List<Tarea>> getEventos() {
        return eventos;
    }
}

// Recordatorio.java
package com.studentorganizer.model;

import java.time.LocalDateTime;

public class Recordatorio {
    private String mensaje;
    private LocalDateTime fechaHora;
    private Tarea tareaAsociada;
    private boolean activo;
    
    public Recordatorio(String mensaje, LocalDateTime fechaHora, Tarea tareaAsociada) {
        this.mensaje = mensaje;
        this.fechaHora = fechaHora;
        this.tareaAsociada = tareaAsociada;
        this.activo = true;
    }
    
    public boolean debeActivarse() {
        return activo && LocalDateTime.now().isAfter(fechaHora);
    }
    
    public void desactivar() {
        this.activo = false;
    }
    
    // Getters y Setters
    public String getMensaje() { return mensaje; }
    public void setMensaje(String mensaje) { this.mensaje = mensaje; }
    
    public LocalDateTime getFechaHora() { return fechaHora; }
    public void setFechaHora(LocalDateTime fechaHora) { this.fechaHora = fechaHora; }
    
    public Tarea getTareaAsociada() { return tareaAsociada; }
    public void setTareaAsociada(Tarea tareaAsociada) { this.tareaAsociada = tareaAsociada; }
    
    public boolean isActivo() { return activo; }
    public void setActivo(boolean activo) { this.activo = activo; }
}

// Enums

// Prioridad.java
package com.studentorganizer.model;

public enum Prioridad {
    ALTA("Alta"),
    MEDIA("Media"),
    BAJA("Baja");
    
    private final String displayName;
    
    Prioridad(String displayName) {
        this.displayName = displayName;
    }
    
    @Override
    public String toString() {
        return displayName;
    }
}

// Estado.java
package com.studentorganizer.model;

public enum Estado {
    PENDIENTE("Pendiente"),
    COMPLETADA("Completada");
    
    private final String displayName;
    
    Estado(String displayName) {
        this.displayName = displayName;
    }
    
    @Override
    public String toString() {
        return displayName;
    }
}

// TecnicaEstudio.java
package com.studentorganizer.model;

public enum TecnicaEstudio {
    POMODORO("Pomodoro"),
    LIBRE("Libre");
    
    private final String displayName;
    
    TecnicaEstudio(String displayName) {
        this.displayName = displayName;
    }
    
    @Override
    public String toString() {
        return displayName;
    }
}
------------------------------------------------------------------------------------------------
/ MainFrame.java - Ventana principal de la aplicación
package com.studentorganizer.gui;

import com.studentorganizer.model.*;
import com.studentorganizer.service.TareaService;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class MainFrame extends JFrame {
    private Estudiante estudiante;
    private TareaService tareaService;
    
    // Componentes principales
    private JPanel leftPanel, centerPanel, rightPanel;
    private JList<Tarea> tareasList;
    private DefaultListModel<Tarea> tareasModel;
    private JLabel welcomeLabel, pendingCountLabel, completedCountLabel;
    
    // Timer Pomodoro
    private PomodoroPanel pomodoroPanel;
    
    public MainFrame(Estudiante estudiante) {
        this.estudiante = estudiante;
        this.tareaService = new TareaService(estudiante);
        
        initializeComponents();
        setupUI();
        setupEventListeners();
        updateTaskCounts();
        loadTasks();
    }
    
    private void initializeComponents() {
        setTitle("StudyOrganizer - Dashboard de " + estudiante.getNombre());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1200, 800);
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        tareasModel = new DefaultListModel<>();
        tareasList = new JList<>(tareasModel);
        tareasList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tareasList.setCellRenderer(new TareaListCellRenderer());
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        
        // Panel superior
        add(createTopPanel(), BorderLayout.NORTH);
        
        // Panel principal con tres secciones
        JPanel mainPanel = new JPanel(new BorderLayout());
        
        // Sidebar izquierdo
        leftPanel = createLeftPanel();
        mainPanel.add(leftPanel, BorderLayout.WEST);
        
        // Panel central
        centerPanel = createCenterPanel();
        mainPanel.add(centerPanel, BorderLayout.CENTER);
        
        // Panel derecho (Timer Pomodoro)
        rightPanel = createRightPanel();
        mainPanel.add(rightPanel, BorderLayout.EAST);
        
        add(mainPanel, BorderLayout.CENTER);
        
        // Panel inferior
        add(createBottomPanel(), BorderLayout.SOUTH);
    }
    
    private JPanel createTopPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(102, 126, 234));
        panel.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));
        
        welcomeLabel = new JLabel("¡Hola, " + estudiante.getNombre() + "!");
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 24));
        welcomeLabel.setForeground(Color.WHITE);
        
        JLabel dateLabel = new JLabel(LocalDate.now().format(DateTimeFormatter.ofPattern("EEEE, d MMMM yyyy")));
        dateLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        dateLabel.setForeground(Color.WHITE);
        
        JButton logoutButton = new JButton("Cerrar Sesión");
        logoutButton.setBackground(Color.WHITE);
        logoutButton.setForeground(new Color(102, 126, 234));
        logoutButton.setFocusPainted(false);
        logoutButton.addActionListener(e -> logout());
        
        JPanel leftInfo = new JPanel(new BorderLayout());
        leftInfo.setOpaque(false);
        leftInfo.add(welcomeLabel, BorderLayout.NORTH);
        leftInfo.add(dateLabel, BorderLayout.SOUTH);
        
        panel.add(leftInfo, BorderLayout.WEST);
        panel.add(logoutButton, BorderLayout.EAST);
        
        return panel;
    }
    
    private JPanel createLeftPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setPreferredSize(new Dimension(300, 0));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Panel de información del usuario
        JPanel userInfoPanel = new JPanel();
        userInfoPanel.setLayout(new BoxLayout(userInfoPanel, BoxLayout.Y_AXIS));
        userInfoPanel.setBorder(BorderFactory.createTitledBorder("Mi Perfil"));
        userInfoPanel.setBackground(Color.WHITE);
        
        JLabel nameLabel = new JLabel("Nombre: " + estudiante.getNombre());
        JLabel careerLabel = new JLabel("Carrera: " + estudiante.getCarrera());
        JLabel emailLabel = new JLabel("Email: " + estudiante.getEmail());
        
        nameLabel.setFont(new Font("Arial", Font.BOLD, 12));
        
        userInfoPanel.add(nameLabel);
        userInfoPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        userInfoPanel.add(careerLabel);
        userInfoPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        userInfoPanel.add(emailLabel);
        
        // Panel de estadísticas
        JPanel statsPanel = new JPanel(new GridLayout(2, 1, 5, 5));
        statsPanel.setBorder(BorderFactory.createTitledBorder("Estadísticas"));
        
        pendingCountLabel = new JLabel("Tareas Pendientes: 0");
        completedCountLabel = new JLabel("Tareas Completadas: 0");
        
        pendingCountLabel.setFont(new Font("Arial", Font.BOLD, 14));
        completedCountLabel.setFont(new Font("Arial", Font.BOLD, 14));
        pendingCountLabel.setForeground(new Color(255, 193, 7));
        completedCountLabel.setForeground(new Color(40, 167, 69));
        
        statsPanel.add(pendingCountLabel);
        statsPanel.add(completedCountLabel);
        
        // Botones de acción
        JPanel actionsPanel = new JPanel();
        actionsPanel.setLayout(new BoxLayout(actionsPanel, BoxLayout.Y_AXIS));
actionsPanel.setBorder(BorderFactory.createTitledBorder("Acciones"));
        
        JButton addTaskButton = new JButton("➕ Nueva Tarea");
        JButton viewCalendarButton = new JButton("📅 Ver Calendario");
        JButton manageCoursesButton = new JButton("📚 Gestionar Cursos");
        
        addTaskButton.setBackground(new Color(40, 167, 69));
        addTaskButton.setForeground(Color.WHITE);
        addTaskButton.setFocusPainted(false);
        
        viewCalendarButton.setBackground(new Color(23, 162, 184));
        viewCalendarButton.setForeground(Color.WHITE);
        viewCalendarButton.setFocusPainted(false);
        
        manageCoursesButton.setBackground(new Color(102, 126, 234));
        manageCoursesButton.setForeground(Color.WHITE);
        manageCoursesButton.setFocusPainted(false);
        
        actionsPanel.add(addTaskButton);
        actionsPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        actionsPanel.add(viewCalendarButton);
        actionsPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        actionsPanel.add(manageCoursesButton);
        
        // Event listeners para botones
        addTaskButton.addActionListener(e -> openAddTaskDialog());
        viewCalendarButton.addActionListener(e -> openCalendarView());
        manageCoursesButton.addActionListener(e -> openCoursesDialog());
        
        panel.add(userInfoPanel, BorderLayout.NORTH);
        panel.add(statsPanel, BorderLayout.CENTER);
        panel.add(actionsPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private JPanel createCenterPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Panel de filtros
        JPanel filterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        filterPanel.setBorder(BorderFactory.createTitledBorder("Filtros"));
        
        JComboBox<String> statusFilter = new JComboBox<>(new String[]{"Todas", "Pendientes", "Completadas"});
        JComboBox<String> priorityFilter = new JComboBox<>(new String[]{"Todas", "Alta", "Media", "Baja"});
        JButton refreshButton = new JButton("🔄 Actualizar");
        
        filterPanel.add(new JLabel("Estado:"));
        filterPanel.add(statusFilter);
        filterPanel.add(new JLabel("Prioridad:"));
        filterPanel.add(priorityFilter);
        filterPanel.add(refreshButton);
        
        // Lista de tareas
        JScrollPane scrollPane = new JScrollPane(tareasList);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Mis Tareas"));
        
        // Panel de acciones para tareas
        JPanel taskActionsPanel = new JPanel(new FlowLayout());
        
        JButton editButton = new JButton("✏️ Editar");
        JButton deleteButton = new JButton("🗑️ Eliminar");
        JButton completeButton = new JButton("✅ Completar");
        
        editButton.setBackground(new Color(255, 193, 7));
        editButton.setForeground(Color.WHITE);
        deleteButton.setBackground(new Color(220, 53, 69));
        deleteButton.setForeground(Color.WHITE);
        completeButton.setBackground(new Color(40, 167, 69));
        completeButton.setForeground(Color.WHITE);
        
        editButton.setFocusPainted(false);
        deleteButton.setFocusPainted(false);
        completeButton.setFocusPainted(false);
        
        taskActionsPanel.add(editButton);
        taskActionsPanel.add(deleteButton);
        taskActionsPanel.add(completeButton);
        
        // Event listeners
        statusFilter.addActionListener(e -> filterTasks(statusFilter, priorityFilter));
        priorityFilter.addActionListener(e -> filterTasks(statusFilter, priorityFilter));
        refreshButton.addActionListener(e -> loadTasks());
        
        editButton.addActionListener(e -> editSelectedTask());
        deleteButton.addActionListener(e -> deleteSelectedTask());
        completeButton.addActionListener(e -> completeSelectedTask());
        
        panel.add(filterPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(taskActionsPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    private JPanel createRightPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setPreferredSize(new Dimension(350, 0));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Timer Pomodoro
        pomodoroPanel = new PomodoroPanel();
        panel.add(pomodoroPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createBottomPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(new Color(248, 249, 250));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        
        JLabel statusLabel = new JLabel("Listo para organizar tu día de estudio");
        statusLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        statusLabel.setForeground(new Color(108, 117, 125));
        
        panel.add(statusLabel, BorderLayout.WEST);
        
        return panel;
    }
    
    private void setupEventListeners() {
        // Double-click en lista de tareas para editar
        tareasList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    editSelectedTask();
                }
            }
        });
    }
    
    // Métodos de acción
    private void openAddTaskDialog() {
        AddTaskDialog dialog = new AddTaskDialog(this, estudiante);
        dialog.setVisible(true);
        if (dialog.isTaskCreated()) {
            loadTasks();
            updateTaskCounts();
        }
    }
    
    private void openCalendarView() {
        CalendarFrame calendar = new CalendarFrame(estudiante);
        calendar.setVisible(true);
    }
    
    private void openCoursesDialog() {
        CoursesDialog dialog = new CoursesDialog(this);
        dialog.setVisible(true);
    }
    
    private void editSelectedTask() {
        Tarea selectedTask = tareasList.getSelectedValue();
        if (selectedTask == null) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una tarea para editar.", 
                "Sin selección", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        EditTaskDialog dialog = new EditTaskDialog(this, selectedTask);
        dialog.setVisible(true);
        if (dialog.isTaskEdited()) {
            loadTasks();
            updateTaskCounts();
        }
    }
    
    private void deleteSelectedTask() {
        Tarea selectedTask = tareasList.getSelectedValue();
        if (selectedTask == null) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una tarea para eliminar.", 
                "Sin selección", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int option = JOptionPane.showConfirmDialog(this, 
            "¿Estás seguro de que quieres eliminar la tarea '" + selectedTask.getNombre() + "'?",
            "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            estudiante.eliminarTarea(selectedTask);
            loadTasks();
            updateTaskCounts();
        }
    }
    
    private void completeSelectedTask() {
        Tarea selectedTask = tareasList.getSelectedValue();
        if (selectedTask == null) {
            JOptionPane.showMessageDialog(this, "Por favor selecciona una tarea para completar.", 
                "Sin selección", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedTask.getEstado() == Estado.COMPLETADA) {
            JOptionPane.showMessageDialog(this, "Esta tarea ya está completada.", 
                "Tarea completada", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        selectedTask.marcarComoCompletada();
        loadTasks();
        updateTaskCounts();
        
        JOptionPane.showMessageDialog(this, "¡Tarea completada! ¡Bien hecho!", 
            "¡Éxito!", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void filterTasks(JComboBox<String> statusFilter, JComboBox<String> priorityFilter) {
        String status = (String) statusFilter.getSelectedItem();
        String priority = (String) priorityFilter.getSelectedItem();
        
        tareasModel.clear();
        
        List<Tarea> allTasks = estudiante.getListaDeTareas();
        for (Tarea tarea : allTasks) {
            boolean statusMatch = status.equals("Todas") || 
                (status.equals("Pendientes") && tarea.getEstado() == Estado.PENDIENTE) ||
                (status.equals("Completadas") && tarea.getEstado() == Estado.COMPLETADA);
                
            boolean priorityMatch = priority.equals("Todas") || 
                tarea.getPrioridad().toString().equals(priority);
            
            if (statusMatch && priorityMatch) {
                tareasModel.addElement(tarea);
            }
        }
    }
    
    private void loadTasks() {
        tareasModel.clear();
        List<Tarea> tasks = estudiante.getListaDeTareas();
        for (Tarea tarea : tasks) {
            tareasModel.addElement(tarea);
        }
    }
    
    private void updateTaskCounts() {
        int pendingCount = estudiante.obtenerTareasPendientes().size();
        int completedCount = estudiante.obtenerTareasCompletadas().size();
        
        pendingCountLabel.setText("Tareas Pendientes: " + pendingCount);
        completedCountLabel.setText("Tareas Completadas: " + completedCount);
    }
    
    private void logout() {
        int option = JOptionPane.showConfirmDialog(this, 
            "¿Estás seguro de que quieres cerrar sesión?",
            "Confirmar cierre de sesión", JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            dispose();
            new LoginFrame().setVisible(true);
        }
    }
}

// TareaListCellRenderer.java - Para mostrar las tareas con colores
package com.studentorganizer.gui;

import com.studentorganizer.model.*;
import javax.swing.*;
import java.awt.*;

public class TareaListCellRenderer extends DefaultListCellRenderer {
    @Override
    public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                boolean isSelected, boolean cellHasFocus) {
        super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        
        if (value instanceof Tarea) {
            Tarea tarea = (Tarea) value;
            
            // Formato del texto
            String texto = String.format("<html><b>%s</b><br><small>%s - %s</small><br><small style='color: gray;'>%s</small></html>",
                tarea.getNombre(),
                tarea.getFechaEntrega(),
                tarea.getPrioridad(),
                tarea.getCurso().getNombre());
            
            setText(texto);
            
            // Color de fondo según prioridad y estado
            if (!isSelected) {
                if (tarea.getEstado() == Estado.COMPLETADA) {
                    setBackground(new Color(212, 237, 218));
                    setForeground(new Color(21, 87, 36));
                } else {
                    switch (tarea.getPrioridad()) {
                        case ALTA:
                            setBackground(new Color(248, 215, 218));
                            setForeground(new Color(114, 28, 36));
                            break;
                        case MEDIA:
                            setBackground(new Color(255, 243, 205));
                            setForeground(new Color(133, 100, 4));
                            break;
                        case BAJA:
                            setBackground(new Color(209, 236, 241));
                            setForeground(new Color(12, 84, 96));
                            break;
                    }
                }
            }
        }
        
        return this;
    }
}

// PomodoroPanel.java - Panel del timer Pomodoro
package com.studentorganizer.gui;

import com.studentorganizer.model.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class PomodoroPanel extends JPanel {
    private Timer timer;
    private int timeRemaining; // en segundos
    private boolean isRunning;
    private boolean isBreak;
    
    private JLabel timerLabel;
    private JLabel statusLabel;
    private JButton startButton;
    private JButton pauseButton;
    private JButton resetButton;
    private JButton settingsButton;
    
    // Configuración por defecto (en minutos)
    private int workTime = 25;
    private int shortBreak = 5;
    private int longBreak = 15;
    private int sessionCount = 0;
    
    public PomodoroPanel() {
        initializeComponents();
        setupUI();
        setupEventListeners();
        resetTimer();
    }
    
    private void initializeComponents() {
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createTitledBorder("Timer Pomodoro"));
        setBackground(Color.WHITE);
        
        timerLabel = new JLabel("25:00", SwingConstants.CENTER);
        timerLabel.setFont(new Font("Arial", Font.BOLD, 48));
        timerLabel.setForeground(new Color(220, 53, 69));
        
        statusLabel = new JLabel("Listo para estudiar", SwingConstants.CENTER);
        statusLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        statusLabel.setForeground(new Color(108, 117, 125));
        
        startButton = new JButton("▶️ Iniciar");
        pauseButton = new JButton("⏸️ Pausar");
        resetButton = new JButton("🔄 Reiniciar");
        settingsButton = new JButton("⚙️ Configurar");
        
        startButton.setBackground(new Color(40, 167, 69));
        startButton.setForeground(Color.WHITE);
        pauseButton.setBackground(new Color(255, 193, 7));
        pauseButton.setForeground(Color.WHITE);
        resetButton.setBackground(new Color(108, 117, 125));
        resetButton.setForeground(Color.WHITE);
        settingsButton.setBackground(new Color(102, 126, 234));
        settingsButton.setForeground(Color.WHITE);
        
        startButton.setFocusPainted(false);
        pauseButton.setFocusPainted(false);
        resetButton.setFocusPainted(false);
        settingsButton.setFocusPainted(false);
        
        pauseButton.setEnabled(false);
        
        timer = new Timer(1000, e -> updateTimer());
    }
    
    private void setupUI() {
        JPanel timerPanel = new JPanel(new BorderLayout());
        timerPanel.setOpaque(false);
        timerPanel.add(timerLabel, BorderLayout.CENTER);
        timerPanel.add(statusLabel, BorderLayout.SOUTH);
        
        JPanel buttonPanel = new JPanel(new GridLayout(2, 2, 5, 5));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        buttonPanel.add(startButton);
        buttonPanel.add(pauseButton);
        buttonPanel.add(resetButton);
        buttonPanel.add(settingsButton);
        
        JPanel statsPanel = new JPanel();
        statsPanel.setLayout(new BoxLayout(statsPanel, BoxLayout.Y_AXIS));
        statsPanel.setBorder(BorderFactory.createTitledBorder("Estadísticas"));
        
        JLabel sessionsLabel = new JLabel("Sesiones completadas: 0");
        sessionsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        statsPanel.add(sessionsLabel);
        
        add(timerPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        add(statsPanel, BorderLayout.NORTH);
    }
    
    private void setupEventListeners() {
        startButton.addActionListener(e -> startTimer());
        pauseButton.addActionListener(e -> pauseTimer());
        resetButton.addActionListener(e -> resetTimer());
        settingsButton.addActionListener(e -> openSettings());
    }
    
    private void startTimer() {
        isRunning = true;
        timer.start();
        
        startButton.setEnabled(false);
        pauseButton.setEnabled(true);
        
        statusLabel.setText(isBreak ? "¡Tiempo de descanso!" : "¡Concentrado estudiando!");
        statusLabel.setForeground(isBreak ? new Color(40, 167, 69) : new Color(220, 53, 69));
    }
    
    private void pauseTimer() {
        isRunning = false;
        timer.stop();
        
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        
        statusLabel.setText("Pausado");
        statusLabel.setForeground(new Color(255, 193, 7));
    }
    
    private void resetTimer() {
        isRunning = false;
        timer.stop();
        
        timeRemaining = workTime * 60;
        isBreak = false;
        
        updateTimerDisplay();
        
        startButton.setEnabled(true);
        pauseButton.setEnabled(false);
        
        statusLabel.setText("Listo para estudiar");
        statusLabel.setForeground(new Color(108, 117, 125));
    }
    
    private void updateTimer() {
        timeRemaining--;
        updateTimerDisplay();
        
        if (timeRemaining <= 0) {
            timer.stop();
            playNotification();
            
            if (!isBreak) {
                sessionCount++;
                // Después del trabajo, iniciar descanso
                if (sessionCount % 4 == 0) {
                    timeRemaining = longBreak * 60;
                } else {
                    timeRemaining = shortBreak * 60;
                }
                isBreak = true;
                statusLabel.setText("¡Sesión completada! Tiempo de descanso");
            } else {
                // Después del descanso, volver al trabajo
                timeRemaining = workTime * 60;
                isBreak = false;
                statusLabel.setText("¡Descanso terminado! Vamos a trabajar");
            }
            
            updateTimerDisplay();
            
            startButton.setEnabled(true);
            pauseButton.setEnabled(false);
            isRunning = false;
            
            JOptionPane.showMessageDialog(this, 
                isBreak ? "¡Tiempo de trabajar!" : "¡Tiempo de descansar!",
                "Pomodoro", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void updateTimerDisplay() {
        int minutes = timeRemaining / 60;
        int seconds = timeRemaining % 60;
        
        timerLabel.setText(String.format("%02d:%02d", minutes, seconds));
        timerLabel.setForeground(isBreak ? new Color(40, 167, 69) : new Color(220, 53, 69));
    }
    
    private void playNotification() {
        Toolkit.getDefaultToolkit().beep();
    }
    
    private void openSettings() {
        PomodoroSettingsDialog dialog = new PomodoroSettingsDialog(
            (JFrame) SwingUtilities.getWindowAncestor(this), 
            workTime, shortBreak, longBreak);
        dialog.setVisible(true);
        
        if (dialog.isSettingsChanged()) {
            workTime = dialog.getWorkTime();
            shortBreak = dialog.getShortBreak();
            longBreak = dialog.getLongBreak();
            resetTimer();
        }
    }
}

// EstudianteService.java - Servicio para manejar estudiantes
package com.studentorganizer.service;

import com.studentorganizer.model.Estudiante;
import java.util.HashMap;
import java.util.Map;

public class EstudianteService {
    private static Map<String, Estudiante> estudiantes = new HashMap<>();
    
    public boolean registrarEstudiante(String email, String password, String nombre, String carrera) {
        if (estudiantes.containsKey(email)) {
            return false; // Email ya existe
        }
        
        Estudiante nuevoEstudiante = new Estudiante(nombre, carrera, email, password);
        estudiantes.put(email, nuevoEstudiante);
        return true;
    }
    
    public Estudiante autenticarEstudiante(String email, String password) {
        Estudiante estudiante = estudiantes.get(email);
        if (estudiante != null && estudiante.getPassword().equals(password)) {
            return estudiante;
        }
        return null;
    }
    
    public boolean existeEmail(String email) {
        return estudiantes.containsKey(email);
    }
}

// TareaService.java - Servicio para manejar tareas
package com.studentorganizer.service;

import com.studentorganizer.model.*;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

public class TareaService {
    private Estudiante estudiante;
    
    public TareaService(Estudiante estudiante) {
        this.estudiante = estudiante;
    }
    
    public void crearTarea(String nombre, String descripcion, LocalDate fechaEntrega, 
                          Prioridad prioridad, Curso curso) {
        Tarea nuevaTarea = new Tarea(nombre, descripcion, fechaEntrega, prioridad, curso);
        estudiante.agregarTarea(nuevaTarea);
    }
    
    public List<Tarea> obtenerTareasPorPrioridad(Prioridad prioridad) {
        return estudiante.getListaDeTareas().stream()
                .filter(tarea -> tarea.getPrioridad() == prioridad)
                .collect(Collectors.toList());
    }
    
    public List<Tarea> obtenerTareasPorCurso(Curso curso) {
        return estudiante.getListaDeTareas().stream()
                .filter(tarea -> tarea.getCurso().equals(curso))
                .collect(Collectors.toList());
    }
    
    public List<Tarea> obtenerTareasVencidas() {
        LocalDate hoy = LocalDate.now();
        return estudiante.getListaDeTareas().stream()
                .filter(tarea -> tarea.getFechaEntrega().isBefore(hoy) && 
                               tarea.getEstado() == Estado.PENDIENTE)
                .collect(Collectors.toList());
    }
}

// AddTaskDialog.java - Diálogo para agregar tareas
package com.studentorganizer.gui;

import com.studentorganizer.model.*;
import com.studentorganizer.service.TareaService;
import javax.swing.*;
import java.awt.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class AddTaskDialog extends JDialog {
    private JTextField nameField;
    private JTextArea descriptionArea;
    private JTextField dateField;
    private JComboBox<Prioridad> priorityCombo;
    private JComboBox<Curso> courseCombo;
    private boolean taskCreated = false;
    private Estudiante estudiante;
    
    public AddTaskDialog(Frame parent, Estudiante estudiante) {
        super(parent, "Nueva Tarea", true);
        this.estudiante = estudiante;
        
        initializeComponents();
        setupUI();
        setupEventListeners();
    }
    
    private void initializeComponents() {
        setSize(500, 400);
        setLocationRelativeTo(getParent());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        nameField = new JTextField(20);
        descriptionArea = new JTextArea(5, 20);
        dateField = new JTextField(LocalDate.now().plusDays(1).format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        
        priorityCombo = new JComboBox<>(Prioridad.values());
        
        // Crear algunos cursos por defecto si no existen
        List<Curso> cursos = new ArrayList<>();
        cursos.add(new Curso("Matemáticas", "Curso de matemáticas"));
        cursos.add(new Curso("Programación", "Curso de programación"));
        cursos.add(new Curso("Historia", "Curso de historia"));
        cursos.add(new Curso("Ciencias", "Curso de ciencias"));
        
        courseCombo = new JComboBox<>(cursos.toArray(new Curso[0]));
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        
        // Nombre
        gbc.gridx = 0; gbc.gridy = 0; gbc.anchor = GridBagConstraints.WEST;
        formPanel.add(new JLabel("Nombre:"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(nameField, gbc);
        
        // Descripción
        gbc.gridx = 0; gbc.gridy = 1; gbc.anchor = GridBagConstraints.NORTHWEST;
        formPanel.add(new JLabel("Descripción:"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.BOTH;
        formPanel.add(new JScrollPane(descriptionArea), gbc);
        
        // Fecha
        gbc.gridx = 0; gbc.gridy = 2; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.NONE;
        formPanel.add(new JLabel("Fecha (yyyy-mm-dd):"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(dateField, gbc);
        
        // Prioridad
        gbc.gridx = 0; gbc.gridy = 3;
        formPanel.add(new JLabel("Prioridad:"), gbc);
        gbc.gridx = 1;
        formPanel.add(priorityCombo, gbc);
        
        // Curso
        gbc.gridx = 0; gbc.gridy = 4;
        formPanel.add(new JLabel("Curso:"), gbc);
        gbc.gridx = 1;
        formPanel.add(courseCombo, gbc);
        
        // Botones
        JPanel buttonPanel = new JPanel();
        JButton saveButton = new JButton("Guardar");
        JButton cancelButton = new JButton("Cancelar");
        
        saveButton.setBackground(new Color(40, 167, 69));
        saveButton.setForeground(Color.WHITE);
        cancelButton.setBackground(new Color(108, 117, 125));
        cancelButton.setForeground(Color.WHITE);
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        add(formPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        
        // Event listeners
        saveButton.addActionListener(e -> saveTask());
        cancelButton.addActionListener(e -> dispose());
    }
    
    private void setupEventListeners() {
        // Validation listeners podrían ir aquí
    }
    
    private void saveTask() {
        try {
            String nombre = nameField.getText().trim();
            String descripcion = descriptionArea.getText().trim();
            LocalDate fecha = LocalDate.parse(dateField.getText());
            Prioridad prioridad = (Prioridad) priorityCombo.getSelectedItem();
            Curso curso = (Curso) courseCombo.getSelectedItem();
            
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre es requerido", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            TareaService tareaService = new TareaService(estudiante);
            tareaService.crearTarea(nombre, descripcion, fecha, prioridad, curso);
            
            taskCreated = true;
            dispose();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al crear la tarea: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public boolean isTaskCreated() {
        return taskCreated;
    }
}

// PomodoroSettingsDialog.java - Configuración del Pomodoro
package com.studentorganizer.gui;

import javax.swing.*;
import java.awt.*;

public class PomodoroSettingsDialog extends JDialog {
    private JSpinner workTimeSpinner;
    private JSpinner shortBreakSpinner;
    private JSpinner longBreakSpinner;
    private boolean settingsChanged = false;
    
    public PomodoroSettingsDialog(Frame parent, int workTime, int shortBreak, int longBreak) {
        super(parent, "Configuración Pomodoro", true);
        
        initializeComponents(workTime, shortBreak, longBreak);
        setupUI();
        setupEventListeners();
    }
    
    private void initializeComponents(int workTime, int shortBreak, int longBreak) {
        setSize(400, 250);
        setLocationRelativeTo(getParent());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        workTimeSpinner = new JSpinner(new SpinnerNumberModel(workTime, 1, 60, 1));
        shortBreakSpinner = new JSpinner(new SpinnerNumberModel(shortBreak, 1, 30, 1));
        longBreakSpinner = new JSpinner(new SpinnerNumberModel(longBreak, 1, 60, 1));
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        
        // Tiempo de trabajo
        gbc.gridx = 0; gbc.gridy = 0; gbc.anchor = GridBagConstraints.WEST;
        formPanel.add(new JLabel("Tiempo de trabajo (min):"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(workTimeSpinner, gbc);
        
        // Descanso corto
        gbc.gridx = 0; gbc.gridy = 1;
        formPanel.add(new JLabel("Descanso corto (min):"), gbc);
        gbc.gridx = 1;
        formPanel.add(shortBreakSpinner, gbc);
        
        // Descanso largo
        gbc.gridx = 0; gbc.gridy = 2;
        formPanel.add(new JLabel("Descanso largo (min):"), gbc);
        gbc.gridx = 1;
        formPanel.add(longBreakSpinner, gbc);
        
        // Botones
        JPanel buttonPanel = new JPanel();
        JButton saveButton = new JButton("Guardar");
        JButton cancelButton = new JButton("Cancelar");
        
        saveButton.setBackground(new Color(40, 167, 69));
        saveButton.setForeground(Color.WHITE);
        cancelButton.setBackground(new Color(108, 117, 125));
        cancelButton.setForeground(Color.WHITE);
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        add(formPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        
        saveButton.addActionListener(e -> {
            settingsChanged = true;
            dispose();
        });
        
        cancelButton.addActionListener(e -> dispose());
    }
    
    private void setupEventListeners() {
        // Listeners adicionales si es necesario
    }
    
    public boolean isSettingsChanged() {
        return settingsChanged;
    }
    
    public int getWorkTime() {
        return (Integer) workTimeSpinner.getValue();
    }
    
    public int getShortBreak() {
        return (Integer) shortBreakSpinner.getValue();
    }
    
    public int getLongBreak() {
        return (Integer) longBreakSpinner.getValue();
    }
}

// EditTaskDialog.java - Diálogo para editar tareas
package com.studentorganizer.gui;

import com.studentorganizer.model.*;
import javax.swing.*;
import java.awt.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class EditTaskDialog extends JDialog {
    private JTextField nameField;
    private JTextArea descriptionArea;
    private JTextField dateField;
    private JComboBox<Prioridad> priorityCombo;
    private JComboBox<Curso> courseCombo;
    private boolean taskEdited = false;
    private Tarea tarea;
    
    public EditTaskDialog(Frame parent, Tarea tarea) {
        super(parent, "Editar Tarea", true);
        this.tarea = tarea;
        
        initializeComponents();
        setupUI();
        loadTaskData();
    }
    
    private void initializeComponents() {
        setSize(500, 400);
        setLocationRelativeTo(getParent());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        nameField = new JTextField(20);
        descriptionArea = new JTextArea(5, 20);
        dateField = new JTextField();
        
        priorityCombo = new JComboBox<>(Prioridad.values());
        
        // Crear algunos cursos por defecto
        List<Curso> cursos = new ArrayList<>();
        cursos.add(new Curso("Matemáticas", "Curso de matemáticas"));
        cursos.add(new Curso("Programación", "Curso de programación"));
        cursos.add(new Curso("Historia", "Curso de historia"));
        cursos.add(new Curso("Ciencias", "Curso de ciencias"));
        
        courseCombo = new JComboBox<>(cursos.toArray(new Curso[0]));
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        
        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        
        // Nombre
        gbc.gridx = 0; gbc.gridy = 0; gbc.anchor = GridBagConstraints.WEST;
        formPanel.add(new JLabel("Nombre:"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(nameField, gbc);
        
        // Descripción
        gbc.gridx = 0; gbc.gridy = 1; gbc.anchor = GridBagConstraints.NORTHWEST;
        formPanel.add(new JLabel("Descripción:"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.BOTH;
        formPanel.add(new JScrollPane(descriptionArea), gbc);
        
        // Fecha
        gbc.gridx = 0; gbc.gridy = 2; gbc.anchor = GridBagConstraints.WEST; gbc.fill = GridBagConstraints.NONE;
        formPanel.add(new JLabel("Fecha (yyyy-mm-dd):"), gbc);
        gbc.gridx = 1; gbc.fill = GridBagConstraints.HORIZONTAL;
        formPanel.add(dateField, gbc);
        
        // Prioridad
        gbc.gridx = 0; gbc.gridy = 3;
        formPanel.add(new JLabel("Prioridad:"), gbc);
        gbc.gridx = 1;
        formPanel.add(priorityCombo, gbc);
        
        // Curso
        gbc.gridx = 0; gbc.gridy = 4;
        formPanel.add(new JLabel("Curso:"), gbc);
        gbc.gridx = 1;
        formPanel.add(courseCombo, gbc);
        
        // Botones
        JPanel buttonPanel = new JPanel();
        JButton saveButton = new JButton("Guardar Cambios");
        JButton cancelButton = new JButton("Cancelar");
        
        saveButton.setBackground(new Color(255, 193, 7));
        saveButton.setForeground(Color.WHITE);
        cancelButton.setBackground(new Color(108, 117, 125));
        cancelButton.setForeground(Color.WHITE);
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        add(formPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        
        // Event listeners
        saveButton.addActionListener(e -> saveChanges());
        cancelButton.addActionListener(e -> dispose());
    }
    
    private void loadTaskData() {
        nameField.setText(tarea.getNombre());
        descriptionArea.setText(tarea.getDescripcion());
        dateField.setText(tarea.getFechaEntrega().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
        priorityCombo.setSelectedItem(tarea.getPrioridad());
        
        // Buscar el curso correspondiente
        for (int i = 0; i < courseCombo.getItemCount(); i++) {
            Curso curso = courseCombo.getItemAt(i);
            if (curso.getNombre().equals(tarea.getCurso().getNombre())) {
                courseCombo.setSelectedIndex(i);
                break;
            }
        }
    }
    
    private void saveChanges() {
        try {
            String nombre = nameField.getText().trim();
            String descripcion = descriptionArea.getText().trim();
            LocalDate fecha = LocalDate.parse(dateField.getText());
            Prioridad prioridad = (Prioridad) priorityCombo.getSelectedItem();
            
            if (nombre.isEmpty()) {
                JOptionPane.showMessageDialog(this, "El nombre es requerido", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            tarea.editarTarea(nombre, descripcion, fecha, prioridad);
            
            taskEdited = true;
            dispose();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al editar la tarea: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public boolean isTaskEdited() {
        return taskEdited;
    }
}

// CalendarFrame.java - Ventana del calendario
package com.studentorganizer.gui;

import com.studentorganizer.model.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.format.TextStyle;
import java.util.List;
import java.util.Locale;

public class CalendarFrame extends JFrame {
    private Estudiante estudiante;
    private YearMonth currentMonth;
    private JPanel calendarPanel;
    private JLabel monthLabel;
    
    public CalendarFrame(Estudiante estudiante) {
        this.estudiante = estudiante;
        this.currentMonth = YearMonth.now();
        
        initializeComponents();
        setupUI();
        updateCalendar();
    }
    
    private void initializeComponents() {
        setTitle("Calendario - " + estudiante.getNombre());
        setSize(800, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        calendarPanel = new JPanel(new GridLayout(0, 7, 2, 2));
        monthLabel = new JLabel("", SwingConstants.CENTER);
        monthLabel.setFont(new Font("Arial", Font.BOLD, 20));
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        
        // Panel superior con navegación
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.setBackground(new Color(102, 126, 234));
        topPanel.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));
        
        JButton prevButton = new JButton("◀ Anterior");
        JButton nextButton = new JButton("Siguiente ▶");
        
        prevButton.setBackground(Color.WHITE);
        prevButton.setForeground(new Color(102, 126, 234));
        nextButton.setBackground(Color.WHITE);
        nextButton.setForeground(new Color(102, 126, 234));
        
        prevButton.addActionListener(e -> {
            currentMonth = currentMonth.minusMonths(1);
            updateCalendar();
        });
        
        nextButton.addActionListener(e -> {
            currentMonth = currentMonth.plusMonths(1);
            updateCalendar();
        });
        
        monthLabel.setForeground(Color.WHITE);
        
        topPanel.add(prevButton, BorderLayout.WEST);
        topPanel.add(monthLabel, BorderLayout.CENTER);
        topPanel.add(nextButton, BorderLayout.EAST);
        
        // Panel del calendario
        JPanel calendarContainer = new JPanel(new BorderLayout());
        calendarContainer.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        // Encabezados de días
        JPanel headerPanel = new JPanel(new GridLayout(1, 7));
        String[] dayNames = {"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"};
        for (String day : dayNames) {
            JLabel dayLabel = new JLabel(day, SwingConstants.CENTER);
            dayLabel.setFont(new Font("Arial", Font.BOLD, 14));
            dayLabel.setBorder(BorderFactory.createRaisedBevelBorder());
            dayLabel.setBackground(new Color(248, 249, 250));
            dayLabel.setOpaque(true);
            headerPanel.add(dayLabel);
        }
        
        calendarContainer.add(headerPanel, BorderLayout.NORTH);
        calendarContainer.add(calendarPanel, BorderLayout.CENTER);
        
        add(topPanel, BorderLayout.NORTH);
        add(calendarContainer, BorderLayout.CENTER);
    }
    
    private void updateCalendar() {
        calendarPanel.removeAll();
        
        // Actualizar etiqueta del mes
        String monthName = currentMonth.getMonth().getDisplayName(TextStyle.FULL, new Locale("es"));
        monthLabel.setText(monthName + " " + currentMonth.getYear());
        
        // Obtener primer día del mes
        LocalDate firstDay = currentMonth.atDay(1);
        int dayOfWeek = firstDay.getDayOfWeek().getValue() % 7; // 0 = domingo
        
        // Espacios vacíos antes del primer día
        for (int i = 0; i < dayOfWeek; i++) {
            calendarPanel.add(new JPanel());
        }
        
        // Días del mes
        int daysInMonth = currentMonth.lengthOfMonth();
        for (int day = 1; day <= daysInMonth; day++) {
            LocalDate date = currentMonth.atDay(day);
            JPanel dayPanel = createDayPanel(date);
            calendarPanel.add(dayPanel);
        }
        
        calendarPanel.revalidate();
        calendarPanel.repaint();
    }
    
    private JPanel createDayPanel(LocalDate date) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
        panel.setBackground(Color.WHITE);
        panel.setPreferredSize(new Dimension(100, 100));
        
        // Número del día
        JLabel dayLabel = new JLabel(String.valueOf(date.getDayOfMonth()), SwingConstants.CENTER);
        dayLabel.setFont(new Font("Arial", Font.BOLD, 16));
        
        // Resaltar día actual
        if (date.equals(LocalDate.now())) {
            dayLabel.setForeground(Color.WHITE);
            panel.setBackground(new Color(102, 126, 234));
        }
        
        panel.add(dayLabel);
        
        // Obtener tareas para este día
        List<Tarea> tareasDelDia = estudiante.getAgenda().verEventosDelDia(date);
        
        // Mostrar indicadores de tareas
        for (int i = 0; i < Math.min(tareasDelDia.size(), 3); i++) {
            Tarea tarea = tareasDelDia.get(i);
            JLabel taskLabel = new JLabel("• " + tarea.getNombre().substring(0, Math.min(10, tarea.getNombre().length())));
            taskLabel.setFont(new Font("Arial", Font.PLAIN, 9));
            
            // Color según prioridad
            switch (tarea.getPrioridad()) {
                case ALTA:
                    taskLabel.setForeground(new Color(220, 53, 69));
                    break;
                case MEDIA:
                    taskLabel.setForeground(new Color(255, 193, 7));
                    break;
                case BAJA:
                    taskLabel.setForeground(new Color(40, 167, 69));
                    break;
            }
            
            panel.add(taskLabel);
        }
        
        // Mostrar "..." si hay más tareas
        if (tareasDelDia.size() > 3) {
            JLabel moreLabel = new JLabel("...", SwingConstants.CENTER);
            moreLabel.setFont(new Font("Arial", Font.BOLD, 12));
            panel.add(moreLabel);
        }
        
        return panel;
    }
}

// CoursesDialog.java - Diálogo para gestionar cursos
package com.studentorganizer.gui;

import com.studentorganizer.model.Curso;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class CoursesDialog extends JDialog {
    private DefaultListModel<Curso> coursesModel;
    private JList<Curso> coursesList;
    
    public CoursesDialog(Frame parent) {
        super(parent, "Gestionar Cursos", true);
        
        initializeComponents();
        setupUI();
        loadCourses();
    }
    
    private void initializeComponents() {
        setSize(400, 300);
        setLocationRelativeTo(getParent());
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        coursesModel = new DefaultListModel<>();
        coursesList = new JList<>(coursesModel);
        coursesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    private void setupUI() {
        setLayout(new BorderLayout());
        
        // Lista de cursos
        JScrollPane scrollPane = new JScrollPane(coursesList);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Cursos"));
        
        // Botones
        JPanel buttonPanel = new JPanel();
        JButton addButton = new JButton("Agregar");
        JButton editButton = new JButton("Editar");
        JButton deleteButton = new JButton("Eliminar");
        JButton closeButton = new JButton("Cerrar");
        
        addButton.setBackground(new Color(40, 167, 69));
        addButton.setForeground(Color.WHITE);
        editButton.setBackground(new Color(255, 193, 7));
        editButton.setForeground(Color.WHITE);
        deleteButton.setBackground(new Color(220, 53, 69));
        deleteButton.setForeground(Color.WHITE);
        closeButton.setBackground(new Color(108, 117, 125));
        closeButton.setForeground(Color.WHITE);
        
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(closeButton);
        
        add(scrollPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        
        // Event listeners
        closeButton.addActionListener(e -> dispose());
        
        addButton.addActionListener(e -> {
            String name = JOptionPane.showInputDialog(this, "Nombre del curso:");
            if (name != null && !name.trim().isEmpty()) {
                String description = JOptionPane.showInputDialog(this, "Descripción del curso:");
                Curso newCourse = new Curso(name.trim(), description != null ? description.trim() : "");
                coursesModel.addElement(newCourse);
            }
        });
        
        deleteButton.addActionListener(e -> {
            Curso selected = coursesList.getSelectedValue();
            if (selected != null) {
                int option = JOptionPane.showConfirmDialog(this, 
                    "¿Eliminar el curso '" + selected.getNombre() + "'?",
                    "Confirmar", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    coursesModel.removeElement(selected);
                }
            }
        });
    }
    
    private void loadCourses() {
        // Cargar algunos cursos por defecto
        coursesModel.addElement(new Curso("Matemáticas", "Curso de matemáticas"));
        coursesModel.addElement(new Curso("Programación", "Curso de programación"));
        coursesModel.addElement(new Curso("Historia", "Curso de historia"));
        coursesModel.addElement(new Curso("Ciencias", "Curso de ciencias"));
    }
}      